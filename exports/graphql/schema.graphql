type AdminUser {
  id: ID!
  username: String
}

type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  picture: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

type AuthorAggregator {
  count: Int
  totalCount: Int
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorConnectionCreated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionCreated_by {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionId {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionName {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPicture {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionUpdated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionUpdated_by {
  key: ID
  connection: AuthorConnection
}

type AuthorGroupBy {
  id: [AuthorConnectionId]
  created_at: [AuthorConnectionCreated_at]
  updated_at: [AuthorConnectionUpdated_at]
  name: [AuthorConnectionName]
  picture: [AuthorConnectionPicture]
  created_by: [AuthorConnectionCreated_by]
  updated_by: [AuthorConnectionUpdated_by]
}

input AuthorInput {
  name: String
  picture: ID
  created_by: ID
  updated_by: ID
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input createHeaderInput {
  data: HeaderInput
}

type createHeaderPayload {
  header: Header
}

input createHighlightInput {
  data: HighlightInput
}

type createHighlightPayload {
  highlight: Highlight
}

input createLinkInput {
  data: LinkInput
}

type createLinkPayload {
  link: Link
}

input createPictureInput {
  data: PictureInput
}

type createPicturePayload {
  picture: Picture
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRecommandationInput {
  data: RecommandationInput
}

type createRecommandationPayload {
  recommandation: Recommandation
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

input deleteHeaderInput {
  where: InputID
}

type deleteHeaderPayload {
  header: Header
}

input deleteHighlightInput {
  where: InputID
}

type deleteHighlightPayload {
  highlight: Highlight
}

input deleteLinkInput {
  where: InputID
}

type deleteLinkPayload {
  link: Link
}

input deletePictureInput {
  where: InputID
}

type deletePicturePayload {
  picture: Picture
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRecommandationInput {
  where: InputID
}

type deleteRecommandationPayload {
  recommandation: Recommandation
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAuthorInput {
  name: String
  picture: ID
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editHeaderInput {
  name: String
  links: [ID]
  images: [ID]
  highlights: [ID]
  created_by: ID
  updated_by: ID
}

input editHighlightInput {
  name: String
  href: String
  headers: [ID]
  created_by: ID
  updated_by: ID
}

input editLinkInput {
  text: String
  href: String
  status: ENUM_LINK_STATUS
  header: ID
  created_by: ID
  updated_by: ID
}

input editPictureInput {
  image: ID
  description: String
  link: String
  href: String
  headers: [ID]
  created_by: ID
  updated_by: ID
}

input editPostInput {
  title: String
  content: String
  excerpt: String
  coverImage: ID
  date: Date
  slug: String
  author: ID
  status: ENUM_POST_STATUS
  created_by: ID
  updated_by: ID
}

input editRecommandationInput {
  name: String
  job: String
  quote: String
  profile: ID
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editSectionInput {
  titre: String
  description: String
  image: ID
  direction: ENUM_SECTION_DIRECTION
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

enum ENUM_LINK_STATUS {
  ready
  beta
  coming_soon
}

enum ENUM_POST_STATUS {
  published
  draft
}

enum ENUM_SECTION_DIRECTION {
  left
  right
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

type Header {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  created_by: AdminUser
  updated_by: AdminUser
  links(sort: String, limit: Int, start: Int, where: JSON): [Link]
  images(sort: String, limit: Int, start: Int, where: JSON): [Picture]
  highlights(sort: String, limit: Int, start: Int, where: JSON): [Highlight]
}

type HeaderAggregator {
  count: Int
  totalCount: Int
}

type HeaderConnection {
  values: [Header]
  groupBy: HeaderGroupBy
  aggregate: HeaderAggregator
}

type HeaderConnectionCreated_at {
  key: DateTime
  connection: HeaderConnection
}

type HeaderConnectionCreated_by {
  key: ID
  connection: HeaderConnection
}

type HeaderConnectionId {
  key: ID
  connection: HeaderConnection
}

type HeaderConnectionName {
  key: String
  connection: HeaderConnection
}

type HeaderConnectionUpdated_at {
  key: DateTime
  connection: HeaderConnection
}

type HeaderConnectionUpdated_by {
  key: ID
  connection: HeaderConnection
}

type HeaderGroupBy {
  id: [HeaderConnectionId]
  created_at: [HeaderConnectionCreated_at]
  updated_at: [HeaderConnectionUpdated_at]
  name: [HeaderConnectionName]
  created_by: [HeaderConnectionCreated_by]
  updated_by: [HeaderConnectionUpdated_by]
}

input HeaderInput {
  name: String
  links: [ID]
  images: [ID]
  highlights: [ID]
  created_by: ID
  updated_by: ID
}

type Highlight {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  href: String
  created_by: AdminUser
  updated_by: AdminUser
  headers(sort: String, limit: Int, start: Int, where: JSON): [Header]
}

type HighlightAggregator {
  count: Int
  totalCount: Int
}

type HighlightConnection {
  values: [Highlight]
  groupBy: HighlightGroupBy
  aggregate: HighlightAggregator
}

type HighlightConnectionCreated_at {
  key: DateTime
  connection: HighlightConnection
}

type HighlightConnectionCreated_by {
  key: ID
  connection: HighlightConnection
}

type HighlightConnectionHref {
  key: String
  connection: HighlightConnection
}

type HighlightConnectionId {
  key: ID
  connection: HighlightConnection
}

type HighlightConnectionName {
  key: String
  connection: HighlightConnection
}

type HighlightConnectionUpdated_at {
  key: DateTime
  connection: HighlightConnection
}

type HighlightConnectionUpdated_by {
  key: ID
  connection: HighlightConnection
}

type HighlightGroupBy {
  id: [HighlightConnectionId]
  created_at: [HighlightConnectionCreated_at]
  updated_at: [HighlightConnectionUpdated_at]
  name: [HighlightConnectionName]
  href: [HighlightConnectionHref]
  created_by: [HighlightConnectionCreated_by]
  updated_by: [HighlightConnectionUpdated_by]
}

input HighlightInput {
  name: String
  href: String
  headers: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Link {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  text: String
  href: String
  status: ENUM_LINK_STATUS
  header: Header
  created_by: AdminUser
  updated_by: AdminUser
}

type LinkAggregator {
  count: Int
  totalCount: Int
}

type LinkConnection {
  values: [Link]
  groupBy: LinkGroupBy
  aggregate: LinkAggregator
}

type LinkConnectionCreated_at {
  key: DateTime
  connection: LinkConnection
}

type LinkConnectionCreated_by {
  key: ID
  connection: LinkConnection
}

type LinkConnectionHeader {
  key: ID
  connection: LinkConnection
}

type LinkConnectionHref {
  key: String
  connection: LinkConnection
}

type LinkConnectionId {
  key: ID
  connection: LinkConnection
}

type LinkConnectionStatus {
  key: String
  connection: LinkConnection
}

type LinkConnectionText {
  key: String
  connection: LinkConnection
}

type LinkConnectionUpdated_at {
  key: DateTime
  connection: LinkConnection
}

type LinkConnectionUpdated_by {
  key: ID
  connection: LinkConnection
}

type LinkGroupBy {
  id: [LinkConnectionId]
  created_at: [LinkConnectionCreated_at]
  updated_at: [LinkConnectionUpdated_at]
  text: [LinkConnectionText]
  href: [LinkConnectionHref]
  status: [LinkConnectionStatus]
  header: [LinkConnectionHeader]
  created_by: [LinkConnectionCreated_by]
  updated_by: [LinkConnectionUpdated_by]
}

input LinkInput {
  text: String
  href: String
  status: ENUM_LINK_STATUS
  header: ID
  created_by: ID
  updated_by: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Author | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnectionId | AuthorConnectionCreated_at | AuthorConnectionUpdated_at | AuthorConnectionName | AuthorConnectionPicture | AuthorConnectionCreated_by | AuthorConnectionUpdated_by | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | Header | HeaderConnection | HeaderAggregator | HeaderGroupBy | HeaderConnectionId | HeaderConnectionCreated_at | HeaderConnectionUpdated_at | HeaderConnectionName | HeaderConnectionCreated_by | HeaderConnectionUpdated_by | createHeaderPayload | updateHeaderPayload | deleteHeaderPayload | Highlight | HighlightConnection | HighlightAggregator | HighlightGroupBy | HighlightConnectionId | HighlightConnectionCreated_at | HighlightConnectionUpdated_at | HighlightConnectionName | HighlightConnectionHref | HighlightConnectionCreated_by | HighlightConnectionUpdated_by | createHighlightPayload | updateHighlightPayload | deleteHighlightPayload | Link | LinkConnection | LinkAggregator | LinkGroupBy | LinkConnectionId | LinkConnectionCreated_at | LinkConnectionUpdated_at | LinkConnectionText | LinkConnectionHref | LinkConnectionStatus | LinkConnectionHeader | LinkConnectionCreated_by | LinkConnectionUpdated_by | createLinkPayload | updateLinkPayload | deleteLinkPayload | Picture | PictureConnection | PictureAggregator | PictureGroupBy | PictureConnectionId | PictureConnectionCreated_at | PictureConnectionUpdated_at | PictureConnectionImage | PictureConnectionDescription | PictureConnectionLink | PictureConnectionHref | PictureConnectionCreated_by | PictureConnectionUpdated_by | createPicturePayload | updatePicturePayload | deletePicturePayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionTitle | PostConnectionContent | PostConnectionExcerpt | PostConnectionCoverImage | PostConnectionDate | PostConnectionSlug | PostConnectionAuthor | PostConnectionStatus | PostConnectionCreated_by | PostConnectionUpdated_by | createPostPayload | updatePostPayload | deletePostPayload | Recommandation | RecommandationConnection | RecommandationAggregator | RecommandationGroupBy | RecommandationConnectionId | RecommandationConnectionCreated_at | RecommandationConnectionUpdated_at | RecommandationConnectionName | RecommandationConnectionJob | RecommandationConnectionQuote | RecommandationConnectionProfile | RecommandationConnectionCreated_by | RecommandationConnectionUpdated_by | createRecommandationPayload | updateRecommandationPayload | deleteRecommandationPayload | Section | SectionConnection | SectionAggregator | SectionGroupBy | SectionConnectionId | SectionConnectionCreated_at | SectionConnectionUpdated_at | SectionConnectionTitre | SectionConnectionDescription | SectionConnectionImage | SectionConnectionDirection | SectionConnectionCreated_by | SectionConnectionUpdated_by | createSectionPayload | updateSectionPayload | deleteSectionPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createHeader(input: createHeaderInput): createHeaderPayload
  updateHeader(input: updateHeaderInput): updateHeaderPayload
  deleteHeader(input: deleteHeaderInput): deleteHeaderPayload
  createHighlight(input: createHighlightInput): createHighlightPayload
  updateHighlight(input: updateHighlightInput): updateHighlightPayload
  deleteHighlight(input: deleteHighlightInput): deleteHighlightPayload
  createLink(input: createLinkInput): createLinkPayload
  updateLink(input: updateLinkInput): updateLinkPayload
  deleteLink(input: deleteLinkInput): deleteLinkPayload
  createPicture(input: createPictureInput): createPicturePayload
  updatePicture(input: updatePictureInput): updatePicturePayload
  deletePicture(input: deletePictureInput): deletePicturePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createRecommandation(input: createRecommandationInput): createRecommandationPayload
  updateRecommandation(input: updateRecommandationInput): updateRecommandationPayload
  deleteRecommandation(input: deleteRecommandationInput): deleteRecommandationPayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Picture {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  image: UploadFile
  description: String
  link: String
  href: String
  created_by: AdminUser
  updated_by: AdminUser
  headers(sort: String, limit: Int, start: Int, where: JSON): [Header]
}

type PictureAggregator {
  count: Int
  totalCount: Int
}

type PictureConnection {
  values: [Picture]
  groupBy: PictureGroupBy
  aggregate: PictureAggregator
}

type PictureConnectionCreated_at {
  key: DateTime
  connection: PictureConnection
}

type PictureConnectionCreated_by {
  key: ID
  connection: PictureConnection
}

type PictureConnectionDescription {
  key: String
  connection: PictureConnection
}

type PictureConnectionHref {
  key: String
  connection: PictureConnection
}

type PictureConnectionId {
  key: ID
  connection: PictureConnection
}

type PictureConnectionImage {
  key: ID
  connection: PictureConnection
}

type PictureConnectionLink {
  key: String
  connection: PictureConnection
}

type PictureConnectionUpdated_at {
  key: DateTime
  connection: PictureConnection
}

type PictureConnectionUpdated_by {
  key: ID
  connection: PictureConnection
}

type PictureGroupBy {
  id: [PictureConnectionId]
  created_at: [PictureConnectionCreated_at]
  updated_at: [PictureConnectionUpdated_at]
  image: [PictureConnectionImage]
  description: [PictureConnectionDescription]
  link: [PictureConnectionLink]
  href: [PictureConnectionHref]
  created_by: [PictureConnectionCreated_by]
  updated_by: [PictureConnectionUpdated_by]
}

input PictureInput {
  image: ID
  description: String
  link: String
  href: String
  headers: [ID]
  created_by: ID
  updated_by: ID
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  content: String
  excerpt: String
  coverImage: UploadFile
  date: Date
  slug: String
  author: Author
  status: ENUM_POST_STATUS
  created_by: AdminUser
  updated_by: AdminUser
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnectionAuthor {
  key: ID
  connection: PostConnection
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

type PostConnectionCoverImage {
  key: ID
  connection: PostConnection
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionCreated_by {
  key: ID
  connection: PostConnection
}

type PostConnectionDate {
  key: ID
  connection: PostConnection
}

type PostConnectionExcerpt {
  key: String
  connection: PostConnection
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionStatus {
  key: String
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUpdated_by {
  key: ID
  connection: PostConnection
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  title: [PostConnectionTitle]
  content: [PostConnectionContent]
  excerpt: [PostConnectionExcerpt]
  coverImage: [PostConnectionCoverImage]
  date: [PostConnectionDate]
  slug: [PostConnectionSlug]
  author: [PostConnectionAuthor]
  status: [PostConnectionStatus]
  created_by: [PostConnectionCreated_by]
  updated_by: [PostConnectionUpdated_by]
}

input PostInput {
  title: String!
  content: String
  excerpt: String
  coverImage: ID
  date: Date
  slug: String
  author: ID
  status: ENUM_POST_STATUS
  created_by: ID
  updated_by: ID
}

type Query {
  author(id: ID!): Author
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON): AuthorConnection
  header(id: ID!): Header
  headers(sort: String, limit: Int, start: Int, where: JSON): [Header]
  headersConnection(sort: String, limit: Int, start: Int, where: JSON): HeaderConnection
  highlight(id: ID!): Highlight
  highlights(sort: String, limit: Int, start: Int, where: JSON): [Highlight]
  highlightsConnection(sort: String, limit: Int, start: Int, where: JSON): HighlightConnection
  link(id: ID!): Link
  links(sort: String, limit: Int, start: Int, where: JSON): [Link]
  linksConnection(sort: String, limit: Int, start: Int, where: JSON): LinkConnection
  picture(id: ID!): Picture
  pictures(sort: String, limit: Int, start: Int, where: JSON): [Picture]
  picturesConnection(sort: String, limit: Int, start: Int, where: JSON): PictureConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  recommandation(id: ID!): Recommandation
  recommandations(sort: String, limit: Int, start: Int, where: JSON): [Recommandation]
  recommandationsConnection(sort: String, limit: Int, start: Int, where: JSON): RecommandationConnection
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  sectionsConnection(sort: String, limit: Int, start: Int, where: JSON): SectionConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Recommandation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  job: String
  quote: String
  profile: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

type RecommandationAggregator {
  count: Int
  totalCount: Int
}

type RecommandationConnection {
  values: [Recommandation]
  groupBy: RecommandationGroupBy
  aggregate: RecommandationAggregator
}

type RecommandationConnectionCreated_at {
  key: DateTime
  connection: RecommandationConnection
}

type RecommandationConnectionCreated_by {
  key: ID
  connection: RecommandationConnection
}

type RecommandationConnectionId {
  key: ID
  connection: RecommandationConnection
}

type RecommandationConnectionJob {
  key: String
  connection: RecommandationConnection
}

type RecommandationConnectionName {
  key: String
  connection: RecommandationConnection
}

type RecommandationConnectionProfile {
  key: ID
  connection: RecommandationConnection
}

type RecommandationConnectionQuote {
  key: String
  connection: RecommandationConnection
}

type RecommandationConnectionUpdated_at {
  key: DateTime
  connection: RecommandationConnection
}

type RecommandationConnectionUpdated_by {
  key: ID
  connection: RecommandationConnection
}

type RecommandationGroupBy {
  id: [RecommandationConnectionId]
  created_at: [RecommandationConnectionCreated_at]
  updated_at: [RecommandationConnectionUpdated_at]
  name: [RecommandationConnectionName]
  job: [RecommandationConnectionJob]
  quote: [RecommandationConnectionQuote]
  profile: [RecommandationConnectionProfile]
  created_by: [RecommandationConnectionCreated_by]
  updated_by: [RecommandationConnectionUpdated_by]
}

input RecommandationInput {
  name: String
  job: String
  quote: String
  profile: ID
  created_by: ID
  updated_by: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

type Section {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  titre: String
  description: String
  image: UploadFile
  direction: ENUM_SECTION_DIRECTION
  created_by: AdminUser
  updated_by: AdminUser
}

type SectionAggregator {
  count: Int
  totalCount: Int
}

type SectionConnection {
  values: [Section]
  groupBy: SectionGroupBy
  aggregate: SectionAggregator
}

type SectionConnectionCreated_at {
  key: DateTime
  connection: SectionConnection
}

type SectionConnectionCreated_by {
  key: ID
  connection: SectionConnection
}

type SectionConnectionDescription {
  key: String
  connection: SectionConnection
}

type SectionConnectionDirection {
  key: String
  connection: SectionConnection
}

type SectionConnectionId {
  key: ID
  connection: SectionConnection
}

type SectionConnectionImage {
  key: ID
  connection: SectionConnection
}

type SectionConnectionTitre {
  key: String
  connection: SectionConnection
}

type SectionConnectionUpdated_at {
  key: DateTime
  connection: SectionConnection
}

type SectionConnectionUpdated_by {
  key: ID
  connection: SectionConnection
}

type SectionGroupBy {
  id: [SectionConnectionId]
  created_at: [SectionConnectionCreated_at]
  updated_at: [SectionConnectionUpdated_at]
  titre: [SectionConnectionTitre]
  description: [SectionConnectionDescription]
  image: [SectionConnectionImage]
  direction: [SectionConnectionDirection]
  created_by: [SectionConnectionCreated_by]
  updated_by: [SectionConnectionUpdated_by]
}

input SectionInput {
  titre: String
  description: String
  image: ID
  direction: ENUM_SECTION_DIRECTION
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input updateHeaderInput {
  where: InputID
  data: editHeaderInput
}

type updateHeaderPayload {
  header: Header
}

input updateHighlightInput {
  where: InputID
  data: editHighlightInput
}

type updateHighlightPayload {
  highlight: Highlight
}

input updateLinkInput {
  where: InputID
  data: editLinkInput
}

type updateLinkPayload {
  link: Link
}

input updatePictureInput {
  where: InputID
  data: editPictureInput
}

type updatePicturePayload {
  picture: Picture
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRecommandationInput {
  where: InputID
  data: editRecommandationInput
}

type updateRecommandationPayload {
  recommandation: Recommandation
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSectionInput {
  where: InputID
  data: editSectionInput
}

type updateSectionPayload {
  section: Section
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
